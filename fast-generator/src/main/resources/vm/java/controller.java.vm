package ${packageName}.controller;

import com.j2eefast.common.core.business.annotaion.BussinessLog;
import com.j2eefast.common.core.enums.BusinessType;
import com.j2eefast.common.core.utils.*;
import com.j2eefast.framework.annotation.RepeatSubmit;
import com.j2eefast.common.core.controller.BaseController;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.ui.ModelMap;
import java.util.Map;
import java.util.Date;
import org.springframework.web.bind.annotation.*;
import ${packageName}.entity.${ClassName}Entity;
import ${packageName}.service.${ClassName}Service;
#if($table.master)
import ${packageName}.entity.${childTable.className}Entity;
import ${packageName}.service.${childTable.className}Service;
import java.util.List;
#end###
#if($table.tree)
import com.j2eefast.common.core.base.entity.Ztree;
#end

/**
 * ${functionName}页面控制器
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController{##


    private String prefix = "modules/${moduleName}/${businessName}";##

    @Autowired##

    private ${ClassName}Service ${className}Service;##

    #if($table.master)
    #set($classEnty = $childTable.className.substring(0,1).toLowerCase() + $childTable.className.substring(1))

    @Autowired###

    private ${childTable.className}Service ${classEnty}Service;###


    #end

    @RequiresPermissions("${permissionPrefix}:view")
    @GetMapping()
    public String ${businessName}(){
        return prefix + "/${businessName}";
    }##

    #if($table.crud || $table.r || $table.master)##
    #*有查询列表*#
    @RequiresPermissions("${permissionPrefix}:list")
    @RequestMapping(value = "/list", method = RequestMethod.POST)
    @ResponseBody
    public ResponseData list(@RequestParam Map<String, Object> params,${ClassName}Entity ${className}Entity) {####
        #if($table.dbName != 'MASTER' && $table.dbName != 'DEFAULT')##设置多数据源
        PageUtil page = ${className}Service.findPage(params);####

        #else###

        PageUtil page = ${className}Service.findPage(params,${className}Entity);#####
        #end###

		return success(page);
    }##
    #end

    #if($table.tree)##

    /**
     * 选择${functionName}树
     */
	//TODO *注意* 树还有问题暂时不用-后期再处理
    #set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = { "/select${BusinessName}Tree/{${pkColumn.javaField}}", "/select${BusinessName}Tree/" })
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap){
        if (StringUtils.isNotNull(${pkColumn.javaField})){
            mmap.put("${className}", ${className}Service.find${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/tree";
    }##

    /**
     * 加载${functionName}树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData(){
        List<Ztree> ztrees = ${className}Service.select${ClassName}Tree();
        return ztrees;
    }
    #end
    #if($table.crud || $table.c || $table.master)##
    #*新增*#
    @GetMapping("/add")
    public String add(ModelMap mmap){
        return prefix + "/add";
    }##


    /**
     * 新增
     */
    @RepeatSubmit
    @RequiresPermissions("${permissionPrefix}:add")
    @BussinessLog(title = "${functionName}", businessType = BusinessType.INSERT)
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    @ResponseBody
    public ResponseData add${ClassName}(@Validated ${ClassName}Entity ${className}){
        //校验参数
        ValidatorUtil.validateEntity(${className});####

        return ${className}Service.add${ClassName}(${className})? success(): error("新增失败!");####

    }##
    #end

    #if($table.master)####
    #set($classEnty = $childTable.className.substring(0,1).toLowerCase() + $childTable.className.substring(1))

    @RequiresPermissions("${permissionPrefix}:list")
    @RequestMapping(value = "/child/list", method = RequestMethod.POST)
    @ResponseBody
    public ResponseData childList(@RequestParam Map<String, Object> params) {####

        PageUtil page = ${classEnty}Service.findPage(params);#####

        return success(page);
    }##
    #end


    #if($table.crud || $table.u || $table.master)##

    /**
     * 修改
     */
    @RequiresPermissions("${permissionPrefix}:edit")
    @GetMapping("/edit/{${pkColumn.javaField}}")
    public String edit(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}, ModelMap mmap){
        ${ClassName}Entity ${className} = ${className}Service.find${ClassName}ById(${pkColumn.javaField});
        mmap.put("${className}", ${className});
        return prefix + "/edit";
    }##


    /**
     * 修改保存${functionName}
     */
    @RepeatSubmit
    @RequiresPermissions("${permissionPrefix}:edit")
    @BussinessLog(title = "${functionName}", businessType = BusinessType.UPDATE)
    @RequestMapping(value = "/edit", method = RequestMethod.POST)
    @ResponseBody
    public ResponseData edit${ClassName}(${ClassName}Entity ${className}){
		ValidatorUtil.validateEntity(${className});####

        return ${className}Service.update${ClassName}ById(${className})? success(): error("修改失败!");####

    }###
    #end


    #if($table.crud || $table.d || ($table.r && $table.rDel) || $table.master)##
/**
     * 删除
     */
    @RepeatSubmit
    @RequiresPermissions("${permissionPrefix}:del")
    @BussinessLog(title = "${functionName}", businessType = BusinessType.DELETE)
    @RequestMapping(value = "/del", method = RequestMethod.POST)
    @ResponseBody
    public ResponseData del(${pkColumn.javaType}[] ids) {
      return ${className}Service.deleteBatchByIds(ids)? success(): error("删除失败!");
    }##
    #end

}
